{
	"Get extension help": {
		"prefix": "sqlExtensionHelp",
		"body": [
			"/*",
			"mssql getting started:",
			"-----------------------------",
			"1. Change language mode to SQL: Open a .sql file or press Ctrl+K M (Cmd+K M on Mac) and choose 'SQL'.",
			"2. Connect to a database: Press F1 to show the command palette, type 'sqlcon' or 'sql' then click 'Connect'.",
			"3. Use the T-SQL editor: Type T-SQL statements in the editor using T-SQL IntelliSense or type 'sql' to see a list of code snippets you can tweak & reuse.",
			"4. Run T-SQL statements: Press F1 and type 'sqlex' or press Ctrl+Shift+e (Cmd+Shift+e on Mac) to execute all the T-SQL code in the editor.",
			"",
			"Tip #1: Put GO on a line by itself to separate T-SQL batches.",
			"Tip #2: Select some T-SQL text in the editor and press `Ctrl+Shift+e` (`Cmd+Shift+e` on Mac) to execute the selection",
			"*/"
		],
		"description": "Get extension help"
	},

	"Create a new Database": {
		"prefix": "sqlCreateDatabase",
		"body": [
			"-- Create a new database called '${1:DatabaseName}'",
			"-- Connect to the 'master' database to run this snippet",
			"USE master",
			"GO",
			"-- Create the new database if it does not exist already",
			"IF NOT EXISTS (",
			"\tSELECT name",
			"\t\tFROM sys.databases",
			"\t\tWHERE name = N'${1:DatabaseName}'",
			")",
			"CREATE DATABASE ${1:DatabaseName}",
			"GO"
		],
		"description": "Create a new Database"
	},

	"Drop a Database": {
		"prefix": "sqlDropDatabase",
		"body": [
			"-- Drop the database '${1:DatabaseName}'",
			"-- Connect to the 'master' database to run this snippet",
			"USE master",
			"GO",
			"-- Uncomment the ALTER DATABASE statement below to set the database to SINGLE_USER mode if the drop database command fails because the database is in use.",
			"-- ALTER DATABASE ${1:DatabaseName} SET SINGLE_USER WITH ROLLBACK IMMEDIATE;",
			"-- Drop the database if it exists",
			"IF EXISTS (",
			"  SELECT name",
			"   FROM sys.databases",
			"   WHERE name = N'${1:DatabaseName}'",
			")",
			"DROP DATABASE ${1:DatabaseName}",
			"GO"
		],
		"description": "Drop a Database"
	},

	"Create a new Table": {
		"prefix": "sqlCreateTable",
		"body": [
			"-- Create a new table called '${1:TableName}' in schema '${2:SchemaName}'",
			"-- Drop the table if it already exists",
			"IF OBJECT_ID('${2:SchemaName}.${1:TableName}', 'U') IS NOT NULL",
			"DROP TABLE ${2:SchemaName}.${1:TableName}",
			"GO",
			"-- Create the table in the specified schema",
			"CREATE TABLE ${2:SchemaName}.${1:TableName}",
			"(",
			"\t${1:TableName}Id INT NOT NULL PRIMARY KEY, -- primary key column",
			"\t$3Column1 [NVARCHAR](50) NOT NULL,",
			"\t$4Column2 [NVARCHAR](50) NOT NULL",
			"\t-- specify more columns here",
			");",
			"GO"
		],
		"description": "Create a new Table"
	},

	"Drop a Table": {
		"prefix": "sqlDropTable",
		"body": [
			"-- Drop the table '${1:TableName}' in schema '${2:SchemaName}'",
			"IF EXISTS (",
			"\tSELECT *",
			"\t\tFROM sys.tables",
			"\t\tJOIN sys.schemas",
			"\t\t\tON sys.tables.schema_id = sys.schemas.schema_id",
			"\tWHERE sys.schemas.name = N'${2:SchemaName}'",
			"\t\tAND sys.tables.name = N'${1:TableName}'",
			")",
			"\tDROP TABLE ${2:SchemaName}.${1:TableName}",
			"GO"
		],
		"description": "Drop a Table"
	},

	"Add a new column to a Table": {
		"prefix": "sqlAddColumn",
		"body": [
			"-- Add a new column '${1:NewColumnName}' to table '${2:TableName}' in schema '${3:SchemaName}'",
			"ALTER TABLE ${3:SchemaName}.${2:TableName}",
			"\tADD ${1:NewColumnName} /*new_column_name*/ int /*new_column_datatype*/ NULL /*new_column_nullability*/",
			"GO"
		],
		"description": "Add a new column to a Table"
	},

	"Drop a column from a Table": {
		"prefix": "sqlDropColumn",
		"body": [
			"-- Drop '${1:ColumnName}' from table '${2:TableName}' in schema '${3:SchemaName}'",
			"ALTER TABLE ${3:SchemaName}.${2:TableName}",
			"\tDROP COLUMN ${1:ColumnName}",
			"GO"
		],
		"description": "Drop a column from a Table"
	},

	"Select rows from a Table or a View": {
		"prefix": "sqlSelect",
		"body": [
			"-- Select rows from a Table or View '${1:TableOrViewName}' in schema '${2:SchemaName}'",
			"SELECT * FROM ${2:SchemaName}.${1:TableOrViewName}",
			"WHERE $3\t/* add search conditions here */",
			"GO"
		],
		"description": "Select rows from a Table or a View"
	},

	"Insert rows into a Table": {
		"prefix": "sqlInsertRows",
		"body": [
			"-- Insert rows into table '${1:TableName}'",
			"INSERT INTO ${1:TableName}",
			"( -- columns to insert data into",
			" $2[Column1], [Column2], [Column3]",
			")",
			"VALUES",
			"( -- first row: values for the columns in the list above",
			" $3Column1_Value, Column2_Value, Column3_Value",
			"),",
			"( -- second row: values for the columns in the list above",
			" $4Column1_Value, Column2_Value, Column3_Value",
			")",
			"-- add more rows here",
			"GO"
		],
		"description": "Insert rows into a Table"
	},

	"Delete rows from a Table": {
		"prefix": "sqlDeleteRows",
		"body": [
			"-- Delete rows from table '${1:TableName}'",
			"DELETE FROM ${1:TableName}",
			"WHERE $2\t/* add search conditions here */",
			"GO"
		],
		"description": "Delete rows from a Table"
	},

	"Update rows in a Table": {
		"prefix": "sqlUpdateRows",
		"body": [
			"-- Update rows in table '${1:TableName}'",
			"UPDATE ${1:TableName}",
			"SET",
			"\t$2[Colum1] = Colum1_Value,",
			"\t$3[Colum2] = Colum2_Value",
			"\t-- add more columns and values here",
			"WHERE $4\t/* add search conditions here */",
			"GO"
		],
		"description": "Update rows in a Table"
	},

	"Create a stored procedure": {
		"prefix": "sqlCreateStoredProc",
		"body": [
			"-- Create a new stored procedure called '${1:StoredProcedureName}' in schema '${2:SchemaName}'",
			"-- Drop the stored procedure if it already exists",
			"IF EXISTS (",
			"SELECT *",
			"\tFROM INFORMATION_SCHEMA.ROUTINES",
			"WHERE SPECIFIC_SCHEMA = N'${2:SchemaName}'",
			"\tAND SPECIFIC_NAME = N'${1:StoredProcedureName}'",
			")",
			"DROP PROCEDURE ${2:SchemaName}.${1:StoredProcedureName}",
			"GO",
			"-- Create the stored procedure in the specified schema",
			"CREATE PROCEDURE ${2:SchemaName}.${1:StoredProcedureName}",
			"\t$3@param1 /*parameter name*/ int /*datatype_for_param1*/ = 0, /*default_value_for_param1*/",
			"\t$4@param2 /*parameter name*/ int /*datatype_for_param1*/ = 0 /*default_value_for_param2*/",
			"-- add more stored procedure parameters here",
			"AS",
			"\t-- body of the stored procedure",
			"\tSELECT @param1, @param2",
			"GO",
			"-- example to execute the stored procedure we just created",
			"EXECUTE ${2:SchemaName}.${1:StoredProcedureName} 1 /*value_for_param1*/, 2 /*value_for_param2*/",
			"GO"
		],
		"description": "Create a stored procedure"
	},

	"Create a view": {
		"prefix": "sqlCreateView",
		"body": [
			"-- Create a new view called '${1:ViewName}' in schema '${2:SchemaName}'",
			"-- Drop the view if it already exists",
			"IF EXISTS (",
			"SELECT *",
			"\tFROM sys.views",
			"\tJOIN sys.schemas",
			"\tON sys.views.schema_id = sys.schemas.schema_id",
			"\tWHERE sys.schemas.name = N'${2:SchemaName}'",
			"\tAND sys.views.name = N'${1:ViewName}'",
			")",
			"DROP VIEW ${2:SchemaName}.${1:ViewName}",
			"GO",
			"-- Create the view in the specified schema",
			"CREATE VIEW ${2:SchemaName}.${1:ViewName}",
			"AS",
			"\t-- body of the view",
			"\tSELECT $4[Column1],",
			"\t\t$4[Column2],",
			"\t\t$4[Column3],",
			"\tFROM ${2:SchemaName}.${3:TableName}",
			"GO"
		],
		"description": "Create a view"
	},

	"Drop a view": {
		"prefix": "sqlDropView",
		"body": [
			"-- Drop the view '${1:ViewName}' in schema '${2:SchemaName}'",
			"IF EXISTS (",
			"\tSELECT *",
			"\t\tFROM sys.views",
			"\t\tJOIN sys.schemas",
			"\t\t\tON sys.views.schema_id = sys.schemas.schema_id",
			"\tWHERE sys.schemas.name = N'${2:SchemaName}'",
			"\t\tAND sys.views.name = N'${1:ViewName}'",
			")",
			"\tDROP VIEW ${2:SchemaName}.${1:ViewName}",
			"GO"
		],
		"description": "Drop a view"
	},

	"List tables": {
		"prefix": "sqlListTablesAndViews",
		"body": [
			"-- Get a list of tables and views in the current database",
			"SELECT table_catalog [database], table_schema [schema], table_name name, table_type type",
			"FROM INFORMATION_SCHEMA.TABLES",
			"GO"
		],
		"description": "List tables and views in the current database"
	},

	"List databases": {
		"prefix": "sqlListDatabases",
		"body": [
			"-- Get a list of databases",
			"SELECT name FROM sys.databases",
			"GO"
		],
		"description": "List databases"
	},

	"List columns": {
		"prefix": "sqlListColumns",
		"body": [
			"-- List columns in all tables whose name is like '${1:TableName}'",
			"SELECT ",
			"\tTableName = tbl.TABLE_SCHEMA + '.' + tbl.TABLE_NAME, ",
			"\tColumnName = col.COLUMN_NAME, ",
			"\tColumnDataType = col.DATA_TYPE",
			"FROM INFORMATION_SCHEMA.TABLES tbl",
			"INNER JOIN INFORMATION_SCHEMA.COLUMNS col ",
			"\tON col.TABLE_NAME = tbl.TABLE_NAME",
			"\tAND col.TABLE_SCHEMA = tbl.TABLE_SCHEMA",
			"",
			"WHERE tbl.TABLE_TYPE = 'BASE TABLE' and tbl.TABLE_NAME like '%${1:TableName}%'",
			"GO"
		],
		"description": "Lists all the columns and their types for tables matching a LIKE statement"
	},

	"Show space used by tables": {
		"prefix": "sqlGetSpaceUsed",
		"body": [
			"-- Get the space used by table ${1:TableName}",
			"SELECT TABL.name AS table_name,",
			"INDX.name AS index_name,",
			"SUM(PART.rows) AS rows_count,",
			"SUM(ALOC.total_pages) AS total_pages,",
			"SUM(ALOC.used_pages) AS used_pages,",
			"SUM(ALOC.data_pages) AS data_pages,",
			"(SUM(ALOC.total_pages)*8/1024) AS total_space_MB,",
			"(SUM(ALOC.used_pages)*8/1024) AS used_space_MB,",
			"(SUM(ALOC.data_pages)*8/1024) AS data_space_MB",
			"FROM sys.tables AS TABL",
			"INNER JOIN sys.indexes AS INDX",
			"ON TABL.object_id = INDX.object_id",
			"INNER JOIN sys.partitions AS PART",
			"ON INDX.object_id = PART.object_id",
			"AND INDX.index_id = PART.index_id",
			"INNER JOIN sys.allocation_units AS ALOC",
			"ON PART.partition_id = ALOC.container_id",
			"WHERE TABL.name LIKE '%${1:TableName}%'",
			"AND INDX.object_id > 255",
			"AND INDX.index_id <= 1",
			"GROUP BY TABL.name, ",
			"INDX.object_id,",
			"INDX.index_id,",
			"INDX.name",
			"ORDER BY Object_Name(INDX.object_id),",
			"(SUM(ALOC.total_pages)*8/1024) DESC",
			"GO"
		],
		"description": "Get Space Used by Tables"
	}
}
