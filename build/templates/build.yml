parameters:
  - name: gulpfile
    type: string
    default: "$(Build.SourcesDirectory)/gulpfile.js"
  - name: publishArtifactName  # artifact name for publish task
    type: string
  - name: packageOffline
    type: boolean
    default: true

steps:
  - task: UseNode@1
    displayName: "Use Node 22.x"
    inputs:
      version: 22.x

  - pwsh: |
      Write-Host "Installing Yarn"
      npm install --global yarn@1.22.19
      Write-Host "Installing Gulp CLI"
      npm install --global gulp-cli@2.3.0
      Write-Host "Installing VSCE"
      npm install --global vsce@2.9.2
    displayName: Install toolchain

  - pwsh: |
      yarn --frozen-lockfile
    displayName: Install extension depedencies
    workingDirectory: "$(Build.SourcesDirectory)"

  - task: gulp@1
    displayName: Build extension
    inputs:
      targets: build
      gulpFile: ${{ parameters.gulpfile }}
      arguments: '--prod'
    env:
      BUILDMACHINE: true

  - pwsh: |
      yarn lint
    displayName: Lint code
    workingDirectory: "$(Build.SourcesDirectory)"


  - pwsh: |
      yarn test
    displayName: Run tests
    workingDirectory: "$(Build.SourcesDirectory)"

  - task: PublishTestResults@2
    displayName: Publish test results
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(Build.SourcesDirectory)/test-reports/test-results-ext.xml'
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@2
    displayName: Publish code coverage
    inputs:
      summaryFileLocation: '$(Build.SourcesDirectory)/coverage/cobertura-coverage.xml'
    condition: succeededOrFailed()

  - task: gulp@1
    displayName: Package (online)
    inputs:
      targets: package:online
      gulpFile: ${{ parameters.gulpfile }}

  - task: gulp@1
    displayName: Package (offline)
    condition: eq( ${{ parameters.packageOffline }}, 'true')
    inputs:
      targets: package:offline
      gulpFile: ${{ parameters.gulpfile }}

  # using CopyFiles to isolate all .vsix packages because PublishPipelineArtifact can't use wildcards
  - task: CopyFiles@2
    displayName: 'Copy VSIXs to clean folder'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: '*.vsix'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/vsix'

  - task: PublishPipelineArtifact@1
    displayName: Publish artifacts
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/vsix'
      artifact: ${{ parameters.publishArtifactName }}