/* eslint-disable */
// THIS IS A COMPUTER GENERATED FILE. CHANGES IN THIS FILE WILL BE OVERWRITTEN.
// TO ADD LOCALIZED CONSTANTS, ADD YOUR CONSTANT TO THE ENU XLIFF FILE UNDER ~/localization/xliff/enu/constants/localizedConstants.enu.xlf AND REBUILD THE PROJECT
import * as nls from 'vscode-nls';
export let viewMore = 'View more';
export let releaseNotesPromptDescription = 'View mssql for Visual Studio Code release notes?';
export let msgStartedExecute = 'Started query execution for document "{0}"';
export let msgFinishedExecute = 'Finished query execution for document "{0}"';
export let msgRunQueryInProgress = 'A query is already running for this editor session. Please cancel this query or wait for its completion.';
export let runQueryBatchStartMessage = 'Started executing query at ';
export let runQueryBatchStartLine = 'Line {0}';
export let msgCancelQueryFailed = 'Canceling the query failed: {0}';
export let msgCancelQueryNotRunning = 'Cannot cancel query as no query is running.';
export let msgChooseDatabaseNotConnected = 'No connection was found. Please connect to a server first.';
export let msgChooseDatabasePlaceholder = 'Choose a database from the list below';
export let msgConnectionError = 'Error {0}: {1}';
export let msgConnectionError2 = 'Failed to connect: {0}';
export let serverNameMissing = 'Server name not received.';
export let msgConnectionErrorPasswordExpired = 'Error {0}: {1} Please login as a different user and change the password using ALTER LOGIN.';
export let connectionErrorChannelName = 'Connection Errors';
export let msgPromptCancelConnect = 'Server connection in progress. Do you want to cancel?';
export let msgPromptClearRecentConnections = 'Confirm to clear recent connections list';
export let msgOpenSqlFile = 'To use this command, Open a .sql file -or- Change editor language to "SQL" -or- Select T-SQL text in the active SQL editor.';
export let recentConnectionsPlaceholder = 'Choose a connection profile from the list below';
export let CreateProfileFromConnectionsListLabel = 'Create Connection Profile';
export let CreateProfileLabel = 'Create';
export let ClearRecentlyUsedLabel = 'Clear Recent Connections List';
export let EditProfilesLabel = 'Edit';
export let RemoveProfileLabel = 'Remove';
export let ManageProfilesPrompt = 'Manage Connection Profiles';
export let SampleServerName = '{{put-server-name-here}}';
export let serverPrompt = 'Server name or ADO.NET connection string';
export let serverPlaceholder = 'hostname\\instance or <server>.database.windows.net or ADO.NET connection string';
export let databasePrompt = 'Database name';
export let startIpAddressPrompt = 'Start IP Address';
export let endIpAddressPrompt = 'End IP Address';
export let firewallRuleNamePrompt = 'Firewall rule name';
export let databasePlaceholder = '[Optional] Database to connect (press Enter to connect to <default> database)';
export let authTypePrompt = 'Authentication Type';
export let authTypeName = 'authenticationType';
export let authTypeIntegrated = 'Integrated';
export let authTypeSql = 'SQL Login';
export let authTypeAzureActiveDirectory = 'Microsoft Entra Id - Universal w/ MFA Support';
export let azureAuthTypeCodeGrant = 'Azure Code Grant';
export let azureAuthTypeDeviceCode = 'Azure Device Code';
export let azureLogChannelName = 'Azure Logs';
export let azureConsentDialogOpen = 'Open';
export let azureConsentDialogCancel = 'Cancel';
export let azureConsentDialogIgnore = 'Ignore Tenant';
export let azureConsentDialogBody = 'Your tenant \'{0} ({1})\' requires you to re-authenticate again to access {2} resources. Press Open to start the authentication process.';
export let azureConsentDialogBodyAccount = 'Your account needs re-authentication to access {0} resources. Press Open to start the authentication process.';
export let azureMicrosoftCorpAccount = 'Microsoft Corp';
export let azureMicrosoftAccount = 'Microsoft Entra Account';
export let azureNoMicrosoftResource = 'Provider \'{0}\' does not have a Microsoft resource endpoint defined.';
export let azureServerCouldNotStart = 'Server could not start. This could be a permissions error or an incompatibility on your system. You can try enabling device code authentication from settings.';
export let azureAuthNonceError = 'Authentication failed due to a nonce mismatch, please close Azure Data Studio and try again.';
export let azureAuthStateError = 'Authentication failed due to a state mismatch, please close ADS and try again.';
export let encryptPrompt = 'Encrypt';
export let encryptName = 'encrypt';
export let encryptOptional = 'Optional (False)';
export let encryptMandatory = 'Mandatory (True)';
export let encryptMandatoryRecommended = 'Mandatory (Recommended)';
export let enableTrustServerCertificate = 'Enable Trust Server Certificate';
export let readMore = 'Read more';
export let cancel = 'Cancel';
export let msgCopyAndOpenWebpage = 'Copy code and open webpage';
export let azureChooseAccount = 'Choose a Microsoft Entra account';
export let azureAddAccount = 'Add a Microsoft Entra account...';
export let accountAddedSuccessfully = 'Microsoft Entra account {0} successfully added.';
export let accountCouldNotBeAdded = 'New Microsoft Entra account could not be added.';
export let accountRemovedSuccessfully = 'Selected Microsoft Entra account removed successfully.';
export let accountRemovalFailed = 'An error occurred while removing Microsoft Entra account: {0}';
export let noAzureAccountForRemoval = 'No Microsoft Entra account can be found for removal.';
export let clearedAzureTokenCache = 'Azure token cache cleared successfully.';
export let cannotConnect = 'Cannot connect due to expired tokens. Please re-authenticate and try again.';
export let aad = 'Microsoft Entra Id';
export let azureChooseTenant = 'Choose a Microsoft Entra tenant';
export let tenant = 'Tenant';
export let usernamePrompt = 'User name';
export let usernamePlaceholder = 'User name (SQL Login)';
export let passwordPrompt = 'Password';
export let passwordPlaceholder = 'Password (SQL Login)';
export let msgSavePassword = 'Save Password? If \'No\', password will be required each time you connect';
export let profileNamePrompt = 'Profile Name';
export let profileNamePlaceholder = '[Optional] Enter a display name for this connection profile';
export let msgCannotOpenContent = 'Error occurred opening content in editor.';
export let msgSaveStarted = 'Started saving results to ';
export let msgSaveFailed = 'Failed to save results. ';
export let msgSaveSucceeded = 'Successfully saved results to ';
export let msgSelectProfileToRemove = 'Select profile to remove';
export let confirmRemoveProfilePrompt = 'Confirm to remove this profile.';
export let msgNoProfilesSaved = 'No connection profile to remove.';
export let msgProfileRemoved = 'Profile removed successfully';
export let msgProfileCreated = 'Profile created successfully';
export let msgProfileCreatedAndConnected = 'Profile created and connected';
export let msgClearedRecentConnections = 'Recent connections list cleared';
export let msgIsRequired = ' is required.';
export let msgError = 'Error: ';
export let msgYes = 'Yes';
export let msgNo = 'No';
export let defaultDatabaseLabel = '<default>';
export let notConnectedLabel = 'Disconnected';
export let notConnectedTooltip = 'Click to connect to a database';
export let connectingLabel = 'Connecting';
export let connectingTooltip = 'Connecting to: ';
export let connectErrorLabel = 'Connection error';
export let connectErrorTooltip = 'Error connecting to: ';
export let connectErrorCode = 'Error code: ';
export let connectErrorMessage = 'Error Message: ';
export let cancelingQueryLabel = 'Canceling query ';
export let updatingIntelliSenseLabel = 'Updating IntelliSense...';
export let extensionNotInitializedError = 'Unable to execute the command while the extension is initializing. Please try again later.';
export let untitledScheme = 'untitled';
export let msgChangeLanguageMode = 'To use this command, you must set the language to "SQL". Confirm to change language mode.';
export let msgChangedDatabaseContext = 'Changed database context to "{0}" for document "{1}"';
export let msgPromptRetryCreateProfile = 'Error: Unable to connect using the connection information provided. Retry profile creation?';
export let refreshTokenLabel = 'Refresh Credentials';
export let msgGetTokenFail = 'Failed to fetch user tokens.';
export let msgPromptRetryConnectionDifferentCredentials = 'Error: Login failed. Retry using different credentials?';
export let msgPromptSSLCertificateValidationFailed = 'Encryption was enabled on this connection, review your SSL and certificate configuration for the target SQL Server, or set \'Trust server certificate\' to \'true\' in the settings file. Note: A self-signed certificate offers only limited protection and is not a recommended practice for production environments. Do you want to enable \'Trust server certificate\' on this connection and retry?';
export let msgPromptRetryFirewallRuleNotSignedIn = 'Your client IP address does not have access to the server. Add a Microsoft Entra account and create a new firewall rule to enable access.';
export let msgPromptRetryFirewallRuleSignedIn = 'Your client IP Address \'{0}\' does not have access to the server \'{1}\' you\'re attempting to connect to. Would you like to create new firewall rule?';
export let msgPromptRetryFirewallRuleAdded = 'Firewall rule successfully added. Retry profile creation? ';
export let msgAccountRefreshFailed = 'Credential Error: An error occurred while attempting to refresh account credentials. Please re-authenticate.';
export let msgPromptProfileUpdateFailed = 'Connection Profile could not be updated. Please modify the connection details manually in settings.json and try again.';
export let msgUnableToExpand = 'Unable to expand. Please check logs for more information.';
export let msgPromptFirewallRuleCreated = 'Firewall rule successfully created.';
export let msgAuthTypeNotFound = 'Failed to get authentication method, please remove and re-add the account.';
export let msgAccountNotFound = 'Account not found';
export let msgChooseQueryHistory = 'Choose Query History';
export let msgChooseQueryHistoryAction = 'Choose An Action';
export let msgOpenQueryHistory = 'Open Query History';
export let msgRunQueryHistory = 'Run Query History';
export let msgInvalidIpAddress = 'Invalid IP Address';
export let msgInvalidRuleName = 'Invalid Firewall rule name';
export let msgNoQueriesAvailable = 'No Queries Available';
export let retryLabel = 'Retry';
export let createFirewallRuleLabel = 'Create Firewall Rule';
export let msgConnecting = 'Connecting to server "{0}" on document "{1}".';
export let msgConnectionNotFound = 'Connection not found for uri "{0}".';
export let msgFoundPendingReconnect = 'Found pending reconnect promise for uri {0}, waiting.';
export let msgPendingReconnectSuccess = 'Previous pending reconnection for uri {0}, succeeded.';
export let msgFoundPendingReconnectFailed = 'Found pending reconnect promise for uri {0}, failed.';
export let msgFoundPendingReconnectError = 'Previous pending reconnect promise for uri {0} is rejected with error {1}, will attempt to reconnect if necessary.';
export let msgAcessTokenExpired = 'Access token expired for connection {0} with uri {1}';
export let msgRefreshTokenError = 'Error when refreshing token';
export let msgAzureCredStoreSaveFailedError = 'Keys for token cache could not be saved in credential store, this may cause Microsoft Entra Id access token persistence issues and connection instabilities. It\'s likely that SqlTools has reached credential storage limit on Windows, please clear at least 2 credentials that start with "Microsoft.SqlTools|" in Windows Credential Manager and reload.';
export let msgRefreshConnection = 'Failed to refresh connection ${0} with uri {1}, invalid connection result.';
export let msgRefreshTokenSuccess = 'Successfully refreshed token for connection {0} with uri {1}, {2}';
export let msgRefreshTokenNotNeeded = 'No need to refresh Microsoft Entra acccount token for connection {0} with uri {1}';
export let msgConnectedServerInfo = 'Connected to server "{0}" on document "{1}". Server information: {2}';
export let msgConnectionFailed = 'Error connecting to server "{0}". Details: {1}';
export let msgChangingDatabase = 'Changing database context to "{0}" on server "{1}" on document "{2}".';
export let msgChangedDatabase = 'Changed database context to "{0}" on server "{1}" on document "{2}".';
export let msgDisconnected = 'Disconnected on document "{0}"';
export let macOpenSslErrorMessage = 'OpenSSL version >=1.0.1 is required to connect.';
export let macOpenSslHelpButton = 'Help';
export let macSierraRequiredErrorMessage = 'macOS Sierra or newer is required to use this feature.';
export let gettingDefinitionMessage = 'Getting definition ...';
export let definitionRequestedStatus = 'DefinitionRequested';
export let definitionRequestCompletedStatus = 'DefinitionRequestCompleted';
export let updatingIntelliSenseStatus = 'updatingIntelliSense';
export let intelliSenseUpdatedStatus = 'intelliSenseUpdated';
export let testLocalizationConstant = 'test';
export let disconnectOptionLabel = 'Disconnect';
export let disconnectOptionDescription = 'Close the current connection';
export let disconnectConfirmationMsg = 'Are you sure you want to disconnect?';
export let elapsedBatchTime = 'Batch execution time: {0}';
export let noActiveEditorMsg = 'A SQL editor must have focus before executing this command';
export let maximizeLabel = 'Maximize';
export let restoreLabel = 'Restore';
export let saveCSVLabel = 'Save as CSV';
export let saveJSONLabel = 'Save as JSON';
export let saveExcelLabel = 'Save as Excel';
export let fileTypeCSVLabel = 'CSV';
export let fileTypeJSONLabel = 'JSON';
export let fileTypeExcelLabel = 'Excel';
export let resultPaneLabel = 'Results';
export let selectAll = 'Select all';
export let copyLabel = 'Copy';
export let copyWithHeadersLabel = 'Copy with Headers';
export let executeQueryLabel = 'Executing query...';
export let QueryExecutedLabel = 'Query executed';
export let messagePaneLabel = 'Messages';
export let messagesTableTimeStampColumn = 'Timestamp';
export let messagesTableMessageColumn = 'Message';
export let lineSelectorFormatted = 'Line {0}';
export let elapsedTimeLabel = 'Total execution time: {0}';
export let msgCannotSaveMultipleSelections = 'Save results command cannot be used with multiple selections.';
export let mssqlProviderName = 'MSSQL';
export let noneProviderName = 'None';
export let flavorChooseLanguage = 'Choose SQL Language';
export let flavorDescriptionMssql = 'Use T-SQL intellisense and syntax error checking on current document';
export let flavorDescriptionNone = 'Disable intellisense and syntax error checking on current document';
export let msgAddConnection = 'Add Connection';
export let msgConnect = 'Connect';
export let azureSignIn = 'Azure: Sign In';
export let azureSignInDescription = 'Sign in to your Azure subscription';
export let azureSignInWithDeviceCode = 'Azure: Sign In with Device Code';
export let azureSignInWithDeviceCodeDescription = 'Sign in to your Azure subscription with a device code. Use this in setups where the Sign In command does not work';
export let azureSignInToAzureCloud = 'Azure: Sign In to Azure Cloud';
export let azureSignInToAzureCloudDescription = 'Sign in to your Azure subscription in one of the sovereign clouds.';
export let taskStatusWithName = '{0}: {1}';
export let taskStatusWithMessage = '{1}. {2}';
export let taskStatusWithNameAndMessage = '{0}: {1}. {2}';
export let failed = 'Failed';
export let succeeded = 'Succeeded';
export let succeededWithWarning = 'Succeeded with warning';
export let canceled = 'Canceled';
export let inProgress = 'In progress';
export let canceling = 'Canceling';
export let notStarted = 'Not started';
export let nodeErrorMessage = 'Parent node was not TreeNodeInfo.';
export let deleteCredentialError = 'Failed to delete credential with id: {0}. {1}';
export let msgClearedRecentConnectionsWithErrors = 'The recent connections list has been cleared but there were errors while deleting some associated credentials. View the errors in the MSSQL output channel.';
export let connectProgressNoticationTitle = 'Testing connection profile...';
export let msgMultipleSelectionModeNotSupported = 'Running query is not supported when the editor is in multiple selection mode.';
export let newColumnWidthPrompt = 'Enter new column width';
export let columnWidthInvalidNumberError = 'Invalid column width';
export let columnWidthMustBePositiveError = 'Width cannot be 0 or negative';
export let objectExplorerNodeRefreshError = 'An error occurred refreshing nodes. See the MSSQL output channel for more details.';
export let showOutputChannelActionButtonText = 'Show MSSQL output';
export let reloadPrompt = 'Authentication Library has changed, please reload Visual Studio Code.';
export let reloadPromptGeneric = 'This setting requires Visual Studio Code to be relaunched, please reload Visual Studio Code.';
export let reloadChoice = 'Reload Visual Studio Code';
export let switchToMsal = 'Switch to MSAL';
export let dismiss = 'Dismiss';
export let querySuccess = 'Query succeeded';
export let queryFailed = 'Query failed';
export let connectionDialog = 'Connection Dialog';
export let azureAccount = 'Azure Account';
export let azureAccountIsRequired = 'Azure Account is required';
export let selectAnAccount = 'Select an account';
export let savePassword = 'Save Password';
export let tenantId = 'Tenant ID';
export let selectATenant = 'Select a tenant';
export let tenantIdIsRequired = 'Tenant ID is required';
export let profileName = 'Profile Name';
export let serverIsRequired = 'Server is required';
export let usernameIsRequired = 'User name is required';
export let connectionString = 'Connection String';
export let connectionStringIsRequired = 'Connection string is required';
export let signIn = 'Sign in';
export let additionalParameters = 'Additional parameters';
export let connect = 'Connect';
export let parameters = 'Parameters';
export let loading = 'Loading';
export let queryCostHeader = 'Query {0}:  Query cost (relative to the script):  {1}';
export let metric = 'Metric';
export let actualElapsedTime = 'Actual Elapsed Time';
export let actualElapsedCpuTime = 'Actual Elapsed CPU Time';
export let cost = 'Cost';
export let subtreeCost = 'Subtree Cost';
export let actualNumberOfRows = 'Actual Number of Rows For All Executions';
export let numRowsRead = 'Number of Rows Read';
export let off = 'Off';
export let findNodes = 'Find Nodes';
export let equals = 'Equals';
export let contains = 'Contains';
export let savePlan = 'Save Plan';
export let openXml = 'Open Xml';
export let openQuery = 'Open Query';
export let zoomIn = 'Zoom In';
export let zoomOut = 'Zoom Out';
export let zoomToFit = 'Zoom to Fit';
export let customZoom = 'Custom Zoom';
export let findNode = 'Find Node';
export let highlightOps = 'Highlight Expensive Operation';
export let toggleTooltips = 'Toggle Tooltips';
export let executionPlan = 'Execution Plan';
export let loadLocalizedConstants = (locale: string) => {
	let localize = nls.config({ locale: locale })();
	viewMore = localize('viewMore', 'View more');
	releaseNotesPromptDescription = localize('releaseNotesPromptDescription', 'View mssql for Visual Studio Code release notes?');
	msgStartedExecute = localize('msgStartedExecute', 'Started query execution for document "{0}"');
	msgFinishedExecute = localize('msgFinishedExecute', 'Finished query execution for document "{0}"');
	msgRunQueryInProgress = localize('msgRunQueryInProgress', 'A query is already running for this editor session. Please cancel this query or wait for its completion.');
	runQueryBatchStartMessage = localize('runQueryBatchStartMessage', 'Started executing query at ');
	runQueryBatchStartLine = localize('runQueryBatchStartLine', 'Line {0}');
	msgCancelQueryFailed = localize('msgCancelQueryFailed', 'Canceling the query failed: {0}');
	msgCancelQueryNotRunning = localize('msgCancelQueryNotRunning', 'Cannot cancel query as no query is running.');
	msgChooseDatabaseNotConnected = localize('msgChooseDatabaseNotConnected', 'No connection was found. Please connect to a server first.');
	msgChooseDatabasePlaceholder = localize('msgChooseDatabasePlaceholder', 'Choose a database from the list below');
	msgConnectionError = localize('msgConnectionError', 'Error {0}: {1}');
	msgConnectionError2 = localize('msgConnectionError2', 'Failed to connect: {0}');
	serverNameMissing = localize('serverNameMissing', 'Server name not received.');
	msgConnectionErrorPasswordExpired = localize('msgConnectionErrorPasswordExpired', 'Error {0}: {1} Please login as a different user and change the password using ALTER LOGIN.');
	connectionErrorChannelName = localize('connectionErrorChannelName', 'Connection Errors');
	msgPromptCancelConnect = localize('msgPromptCancelConnect', 'Server connection in progress. Do you want to cancel?');
	msgPromptClearRecentConnections = localize('msgPromptClearRecentConnections', 'Confirm to clear recent connections list');
	msgOpenSqlFile = localize('msgOpenSqlFile', 'To use this command, Open a .sql file -or- Change editor language to "SQL" -or- Select T-SQL text in the active SQL editor.');
	recentConnectionsPlaceholder = localize('recentConnectionsPlaceholder', 'Choose a connection profile from the list below');
	CreateProfileFromConnectionsListLabel = localize('CreateProfileFromConnectionsListLabel', 'Create Connection Profile');
	CreateProfileLabel = localize('CreateProfileLabel', 'Create');
	ClearRecentlyUsedLabel = localize('ClearRecentlyUsedLabel', 'Clear Recent Connections List');
	EditProfilesLabel = localize('EditProfilesLabel', 'Edit');
	RemoveProfileLabel = localize('RemoveProfileLabel', 'Remove');
	ManageProfilesPrompt = localize('ManageProfilesPrompt', 'Manage Connection Profiles');
	SampleServerName = localize('SampleServerName', '{{put-server-name-here}}');
	serverPrompt = localize('serverPrompt', 'Server name or ADO.NET connection string');
	serverPlaceholder = localize('serverPlaceholder', 'hostname\\instance or <server>.database.windows.net or ADO.NET connection string');
	databasePrompt = localize('databasePrompt', 'Database name');
	startIpAddressPrompt = localize('startIpAddressPrompt', 'Start IP Address');
	endIpAddressPrompt = localize('endIpAddressPrompt', 'End IP Address');
	firewallRuleNamePrompt = localize('firewallRuleNamePrompt', 'Firewall rule name');
	databasePlaceholder = localize('databasePlaceholder', '[Optional] Database to connect (press Enter to connect to <default> database)');
	authTypePrompt = localize('authTypePrompt', 'Authentication Type');
	authTypeName = localize('authTypeName', 'authenticationType');
	authTypeIntegrated = localize('authTypeIntegrated', 'Integrated');
	authTypeSql = localize('authTypeSql', 'SQL Login');
	authTypeAzureActiveDirectory = localize('authTypeAzureActiveDirectory', 'Microsoft Entra Id - Universal w/ MFA Support');
	azureAuthTypeCodeGrant = localize('azureAuthTypeCodeGrant', 'Azure Code Grant');
	azureAuthTypeDeviceCode = localize('azureAuthTypeDeviceCode', 'Azure Device Code');
	azureLogChannelName = localize('azureLogChannelName', 'Azure Logs');
	azureConsentDialogOpen = localize('azureConsentDialogOpen', 'Open');
	azureConsentDialogCancel = localize('azureConsentDialogCancel', 'Cancel');
	azureConsentDialogIgnore = localize('azureConsentDialogIgnore', 'Ignore Tenant');
	azureConsentDialogBody = localize('azureConsentDialogBody', 'Your tenant \'{0} ({1})\' requires you to re-authenticate again to access {2} resources. Press Open to start the authentication process.');
	azureConsentDialogBodyAccount = localize('azureConsentDialogBodyAccount', 'Your account needs re-authentication to access {0} resources. Press Open to start the authentication process.');
	azureMicrosoftCorpAccount = localize('azureMicrosoftCorpAccount', 'Microsoft Corp');
	azureMicrosoftAccount = localize('azureMicrosoftAccount', 'Microsoft Entra Account');
	azureNoMicrosoftResource = localize('azureNoMicrosoftResource', 'Provider \'{0}\' does not have a Microsoft resource endpoint defined.');
	azureServerCouldNotStart = localize('azureServerCouldNotStart', 'Server could not start. This could be a permissions error or an incompatibility on your system. You can try enabling device code authentication from settings.');
	azureAuthNonceError = localize('azureAuthNonceError', 'Authentication failed due to a nonce mismatch, please close Azure Data Studio and try again.');
	azureAuthStateError = localize('azureAuthStateError', 'Authentication failed due to a state mismatch, please close ADS and try again.');
	encryptPrompt = localize('encryptPrompt', 'Encrypt');
	encryptName = localize('encryptName', 'encrypt');
	encryptOptional = localize('encryptOptional', 'Optional (False)');
	encryptMandatory = localize('encryptMandatory', 'Mandatory (True)');
	encryptMandatoryRecommended = localize('encryptMandatoryRecommended', 'Mandatory (Recommended)');
	enableTrustServerCertificate = localize('enableTrustServerCertificate', 'Enable Trust Server Certificate');
	readMore = localize('readMore', 'Read more');
	cancel = localize('cancel', 'Cancel');
	msgCopyAndOpenWebpage = localize('msgCopyAndOpenWebpage', 'Copy code and open webpage');
	azureChooseAccount = localize('azureChooseAccount', 'Choose a Microsoft Entra account');
	azureAddAccount = localize('azureAddAccount', 'Add a Microsoft Entra account...');
	accountAddedSuccessfully = localize('accountAddedSuccessfully', 'Microsoft Entra account {0} successfully added.');
	accountCouldNotBeAdded = localize('accountCouldNotBeAdded', 'New Microsoft Entra account could not be added.');
	accountRemovedSuccessfully = localize('accountRemovedSuccessfully', 'Selected Microsoft Entra account removed successfully.');
	accountRemovalFailed = localize('accountRemovalFailed', 'An error occurred while removing Microsoft Entra account: {0}');
	noAzureAccountForRemoval = localize('noAzureAccountForRemoval', 'No Microsoft Entra account can be found for removal.');
	clearedAzureTokenCache = localize('clearedAzureTokenCache', 'Azure token cache cleared successfully.');
	cannotConnect = localize('cannotConnect', 'Cannot connect due to expired tokens. Please re-authenticate and try again.');
	aad = localize('aad', 'Microsoft Entra Id');
	azureChooseTenant = localize('azureChooseTenant', 'Choose a Microsoft Entra tenant');
	tenant = localize('tenant', 'Tenant');
	usernamePrompt = localize('usernamePrompt', 'User name');
	usernamePlaceholder = localize('usernamePlaceholder', 'User name (SQL Login)');
	passwordPrompt = localize('passwordPrompt', 'Password');
	passwordPlaceholder = localize('passwordPlaceholder', 'Password (SQL Login)');
	msgSavePassword = localize('msgSavePassword', 'Save Password? If \'No\', password will be required each time you connect');
	profileNamePrompt = localize('profileNamePrompt', 'Profile Name');
	profileNamePlaceholder = localize('profileNamePlaceholder', '[Optional] Enter a display name for this connection profile');
	msgCannotOpenContent = localize('msgCannotOpenContent', 'Error occurred opening content in editor.');
	msgSaveStarted = localize('msgSaveStarted', 'Started saving results to ');
	msgSaveFailed = localize('msgSaveFailed', 'Failed to save results. ');
	msgSaveSucceeded = localize('msgSaveSucceeded', 'Successfully saved results to ');
	msgSelectProfileToRemove = localize('msgSelectProfileToRemove', 'Select profile to remove');
	confirmRemoveProfilePrompt = localize('confirmRemoveProfilePrompt', 'Confirm to remove this profile.');
	msgNoProfilesSaved = localize('msgNoProfilesSaved', 'No connection profile to remove.');
	msgProfileRemoved = localize('msgProfileRemoved', 'Profile removed successfully');
	msgProfileCreated = localize('msgProfileCreated', 'Profile created successfully');
	msgProfileCreatedAndConnected = localize('msgProfileCreatedAndConnected', 'Profile created and connected');
	msgClearedRecentConnections = localize('msgClearedRecentConnections', 'Recent connections list cleared');
	msgIsRequired = localize('msgIsRequired', ' is required.');
	msgError = localize('msgError', 'Error: ');
	msgYes = localize('msgYes', 'Yes');
	msgNo = localize('msgNo', 'No');
	defaultDatabaseLabel = localize('defaultDatabaseLabel', '<default>');
	notConnectedLabel = localize('notConnectedLabel', 'Disconnected');
	notConnectedTooltip = localize('notConnectedTooltip', 'Click to connect to a database');
	connectingLabel = localize('connectingLabel', 'Connecting');
	connectingTooltip = localize('connectingTooltip', 'Connecting to: ');
	connectErrorLabel = localize('connectErrorLabel', 'Connection error');
	connectErrorTooltip = localize('connectErrorTooltip', 'Error connecting to: ');
	connectErrorCode = localize('connectErrorCode', 'Error code: ');
	connectErrorMessage = localize('connectErrorMessage', 'Error Message: ');
	cancelingQueryLabel = localize('cancelingQueryLabel', 'Canceling query ');
	updatingIntelliSenseLabel = localize('updatingIntelliSenseLabel', 'Updating IntelliSense...');
	extensionNotInitializedError = localize('extensionNotInitializedError', 'Unable to execute the command while the extension is initializing. Please try again later.');
	untitledScheme = localize('untitledScheme', 'untitled');
	msgChangeLanguageMode = localize('msgChangeLanguageMode', 'To use this command, you must set the language to "SQL". Confirm to change language mode.');
	msgChangedDatabaseContext = localize('msgChangedDatabaseContext', 'Changed database context to "{0}" for document "{1}"');
	msgPromptRetryCreateProfile = localize('msgPromptRetryCreateProfile', 'Error: Unable to connect using the connection information provided. Retry profile creation?');
	refreshTokenLabel = localize('refreshTokenLabel', 'Refresh Credentials');
	msgGetTokenFail = localize('msgGetTokenFail', 'Failed to fetch user tokens.');
	msgPromptRetryConnectionDifferentCredentials = localize('msgPromptRetryConnectionDifferentCredentials', 'Error: Login failed. Retry using different credentials?');
	msgPromptSSLCertificateValidationFailed = localize('msgPromptSSLCertificateValidationFailed', 'Encryption was enabled on this connection, review your SSL and certificate configuration for the target SQL Server, or set \'Trust server certificate\' to \'true\' in the settings file. Note: A self-signed certificate offers only limited protection and is not a recommended practice for production environments. Do you want to enable \'Trust server certificate\' on this connection and retry?');
	msgPromptRetryFirewallRuleNotSignedIn = localize('msgPromptRetryFirewallRuleNotSignedIn', 'Your client IP address does not have access to the server. Add a Microsoft Entra account and create a new firewall rule to enable access.');
	msgPromptRetryFirewallRuleSignedIn = localize('msgPromptRetryFirewallRuleSignedIn', 'Your client IP Address \'{0}\' does not have access to the server \'{1}\' you\'re attempting to connect to. Would you like to create new firewall rule?');
	msgPromptRetryFirewallRuleAdded = localize('msgPromptRetryFirewallRuleAdded', 'Firewall rule successfully added. Retry profile creation? ');
	msgAccountRefreshFailed = localize('msgAccountRefreshFailed', 'Credential Error: An error occurred while attempting to refresh account credentials. Please re-authenticate.');
	msgPromptProfileUpdateFailed = localize('msgPromptProfileUpdateFailed', 'Connection Profile could not be updated. Please modify the connection details manually in settings.json and try again.');
	msgUnableToExpand = localize('msgUnableToExpand', 'Unable to expand. Please check logs for more information.');
	msgPromptFirewallRuleCreated = localize('msgPromptFirewallRuleCreated', 'Firewall rule successfully created.');
	msgAuthTypeNotFound = localize('msgAuthTypeNotFound', 'Failed to get authentication method, please remove and re-add the account.');
	msgAccountNotFound = localize('msgAccountNotFound', 'Account not found');
	msgChooseQueryHistory = localize('msgChooseQueryHistory', 'Choose Query History');
	msgChooseQueryHistoryAction = localize('msgChooseQueryHistoryAction', 'Choose An Action');
	msgOpenQueryHistory = localize('msgOpenQueryHistory', 'Open Query History');
	msgRunQueryHistory = localize('msgRunQueryHistory', 'Run Query History');
	msgInvalidIpAddress = localize('msgInvalidIpAddress', 'Invalid IP Address');
	msgInvalidRuleName = localize('msgInvalidRuleName', 'Invalid Firewall rule name');
	msgNoQueriesAvailable = localize('msgNoQueriesAvailable', 'No Queries Available');
	retryLabel = localize('retryLabel', 'Retry');
	createFirewallRuleLabel = localize('createFirewallRuleLabel', 'Create Firewall Rule');
	msgConnecting = localize('msgConnecting', 'Connecting to server "{0}" on document "{1}".');
	msgConnectionNotFound = localize('msgConnectionNotFound', 'Connection not found for uri "{0}".');
	msgFoundPendingReconnect = localize('msgFoundPendingReconnect', 'Found pending reconnect promise for uri {0}, waiting.');
	msgPendingReconnectSuccess = localize('msgPendingReconnectSuccess', 'Previous pending reconnection for uri {0}, succeeded.');
	msgFoundPendingReconnectFailed = localize('msgFoundPendingReconnectFailed', 'Found pending reconnect promise for uri {0}, failed.');
	msgFoundPendingReconnectError = localize('msgFoundPendingReconnectError', 'Previous pending reconnect promise for uri {0} is rejected with error {1}, will attempt to reconnect if necessary.');
	msgAcessTokenExpired = localize('msgAcessTokenExpired', 'Access token expired for connection {0} with uri {1}');
	msgRefreshTokenError = localize('msgRefreshTokenError', 'Error when refreshing token');
	msgAzureCredStoreSaveFailedError = localize('msgAzureCredStoreSaveFailedError', 'Keys for token cache could not be saved in credential store, this may cause Microsoft Entra Id access token persistence issues and connection instabilities. It\'s likely that SqlTools has reached credential storage limit on Windows, please clear at least 2 credentials that start with "Microsoft.SqlTools|" in Windows Credential Manager and reload.');
	msgRefreshConnection = localize('msgRefreshConnection', 'Failed to refresh connection ${0} with uri {1}, invalid connection result.');
	msgRefreshTokenSuccess = localize('msgRefreshTokenSuccess', 'Successfully refreshed token for connection {0} with uri {1}, {2}');
	msgRefreshTokenNotNeeded = localize('msgRefreshTokenNotNeeded', 'No need to refresh Microsoft Entra acccount token for connection {0} with uri {1}');
	msgConnectedServerInfo = localize('msgConnectedServerInfo', 'Connected to server "{0}" on document "{1}". Server information: {2}');
	msgConnectionFailed = localize('msgConnectionFailed', 'Error connecting to server "{0}". Details: {1}');
	msgChangingDatabase = localize('msgChangingDatabase', 'Changing database context to "{0}" on server "{1}" on document "{2}".');
	msgChangedDatabase = localize('msgChangedDatabase', 'Changed database context to "{0}" on server "{1}" on document "{2}".');
	msgDisconnected = localize('msgDisconnected', 'Disconnected on document "{0}"');
	macOpenSslErrorMessage = localize('macOpenSslErrorMessage', 'OpenSSL version >=1.0.1 is required to connect.');
	macOpenSslHelpButton = localize('macOpenSslHelpButton', 'Help');
	macSierraRequiredErrorMessage = localize('macSierraRequiredErrorMessage', 'macOS Sierra or newer is required to use this feature.');
	gettingDefinitionMessage = localize('gettingDefinitionMessage', 'Getting definition ...');
	definitionRequestedStatus = localize('definitionRequestedStatus', 'DefinitionRequested');
	definitionRequestCompletedStatus = localize('definitionRequestCompletedStatus', 'DefinitionRequestCompleted');
	updatingIntelliSenseStatus = localize('updatingIntelliSenseStatus', 'updatingIntelliSense');
	intelliSenseUpdatedStatus = localize('intelliSenseUpdatedStatus', 'intelliSenseUpdated');
	testLocalizationConstant = localize('testLocalizationConstant', 'test');
	disconnectOptionLabel = localize('disconnectOptionLabel', 'Disconnect');
	disconnectOptionDescription = localize('disconnectOptionDescription', 'Close the current connection');
	disconnectConfirmationMsg = localize('disconnectConfirmationMsg', 'Are you sure you want to disconnect?');
	elapsedBatchTime = localize('elapsedBatchTime', 'Batch execution time: {0}');
	noActiveEditorMsg = localize('noActiveEditorMsg', 'A SQL editor must have focus before executing this command');
	maximizeLabel = localize('maximizeLabel', 'Maximize');
	restoreLabel = localize('restoreLabel', 'Restore');
	saveCSVLabel = localize('saveCSVLabel', 'Save as CSV');
	saveJSONLabel = localize('saveJSONLabel', 'Save as JSON');
	saveExcelLabel = localize('saveExcelLabel', 'Save as Excel');
	fileTypeCSVLabel = localize('fileTypeCSVLabel', 'CSV');
	fileTypeJSONLabel = localize('fileTypeJSONLabel', 'JSON');
	fileTypeExcelLabel = localize('fileTypeExcelLabel', 'Excel');
	resultPaneLabel = localize('resultPaneLabel', 'Results');
	selectAll = localize('selectAll', 'Select all');
	copyLabel = localize('copyLabel', 'Copy');
	copyWithHeadersLabel = localize('copyWithHeadersLabel', 'Copy with Headers');
	executeQueryLabel = localize('executeQueryLabel', 'Executing query...');
	QueryExecutedLabel = localize('QueryExecutedLabel', 'Query executed');
	messagePaneLabel = localize('messagePaneLabel', 'Messages');
	messagesTableTimeStampColumn = localize('messagesTableTimeStampColumn', 'Timestamp');
	messagesTableMessageColumn = localize('messagesTableMessageColumn', 'Message');
	lineSelectorFormatted = localize('lineSelectorFormatted', 'Line {0}');
	elapsedTimeLabel = localize('elapsedTimeLabel', 'Total execution time: {0}');
	msgCannotSaveMultipleSelections = localize('msgCannotSaveMultipleSelections', 'Save results command cannot be used with multiple selections.');
	mssqlProviderName = localize('mssqlProviderName', 'MSSQL');
	noneProviderName = localize('noneProviderName', 'None');
	flavorChooseLanguage = localize('flavorChooseLanguage', 'Choose SQL Language');
	flavorDescriptionMssql = localize('flavorDescriptionMssql', 'Use T-SQL intellisense and syntax error checking on current document');
	flavorDescriptionNone = localize('flavorDescriptionNone', 'Disable intellisense and syntax error checking on current document');
	msgAddConnection = localize('msgAddConnection', 'Add Connection');
	msgConnect = localize('msgConnect', 'Connect');
	azureSignIn = localize('azureSignIn', 'Azure: Sign In');
	azureSignInDescription = localize('azureSignInDescription', 'Sign in to your Azure subscription');
	azureSignInWithDeviceCode = localize('azureSignInWithDeviceCode', 'Azure: Sign In with Device Code');
	azureSignInWithDeviceCodeDescription = localize('azureSignInWithDeviceCodeDescription', 'Sign in to your Azure subscription with a device code. Use this in setups where the Sign In command does not work');
	azureSignInToAzureCloud = localize('azureSignInToAzureCloud', 'Azure: Sign In to Azure Cloud');
	azureSignInToAzureCloudDescription = localize('azureSignInToAzureCloudDescription', 'Sign in to your Azure subscription in one of the sovereign clouds.');
	taskStatusWithName = localize('taskStatusWithName', '{0}: {1}');
	taskStatusWithMessage = localize('taskStatusWithMessage', '{1}. {2}');
	taskStatusWithNameAndMessage = localize('taskStatusWithNameAndMessage', '{0}: {1}. {2}');
	failed = localize('failed', 'Failed');
	succeeded = localize('succeeded', 'Succeeded');
	succeededWithWarning = localize('succeededWithWarning', 'Succeeded with warning');
	canceled = localize('canceled', 'Canceled');
	inProgress = localize('inProgress', 'In progress');
	canceling = localize('canceling', 'Canceling');
	notStarted = localize('notStarted', 'Not started');
	nodeErrorMessage = localize('nodeErrorMessage', 'Parent node was not TreeNodeInfo.');
	deleteCredentialError = localize('deleteCredentialError', 'Failed to delete credential with id: {0}. {1}');
	msgClearedRecentConnectionsWithErrors = localize('msgClearedRecentConnectionsWithErrors', 'The recent connections list has been cleared but there were errors while deleting some associated credentials. View the errors in the MSSQL output channel.');
	connectProgressNoticationTitle = localize('connectProgressNoticationTitle', 'Testing connection profile...');
	msgMultipleSelectionModeNotSupported = localize('msgMultipleSelectionModeNotSupported', 'Running query is not supported when the editor is in multiple selection mode.');
	newColumnWidthPrompt = localize('newColumnWidthPrompt', 'Enter new column width');
	columnWidthInvalidNumberError = localize('columnWidthInvalidNumberError', 'Invalid column width');
	columnWidthMustBePositiveError = localize('columnWidthMustBePositiveError', 'Width cannot be 0 or negative');
	objectExplorerNodeRefreshError = localize('objectExplorerNodeRefreshError', 'An error occurred refreshing nodes. See the MSSQL output channel for more details.');
	showOutputChannelActionButtonText = localize('showOutputChannelActionButtonText', 'Show MSSQL output');
	reloadPrompt = localize('reloadPrompt', 'Authentication Library has changed, please reload Visual Studio Code.');
	reloadPromptGeneric = localize('reloadPromptGeneric', 'This setting requires Visual Studio Code to be relaunched, please reload Visual Studio Code.');
	reloadChoice = localize('reloadChoice', 'Reload Visual Studio Code');
	switchToMsal = localize('switchToMsal', 'Switch to MSAL');
	dismiss = localize('dismiss', 'Dismiss');
	querySuccess = localize('querySuccess', 'Query succeeded');
	queryFailed = localize('queryFailed', 'Query failed');
	connectionDialog = localize('connectionDialog', 'Connection Dialog');
	azureAccount = localize('azureAccount', 'Azure Account');
	azureAccountIsRequired = localize('azureAccountIsRequired', 'Azure Account is required');
	selectAnAccount = localize('selectAnAccount', 'Select an account');
	savePassword = localize('savePassword', 'Save Password');
	tenantId = localize('tenantId', 'Tenant ID');
	selectATenant = localize('selectATenant', 'Select a tenant');
	tenantIdIsRequired = localize('tenantIdIsRequired', 'Tenant ID is required');
	profileName = localize('profileName', 'Profile Name');
	serverIsRequired = localize('serverIsRequired', 'Server is required');
	usernameIsRequired = localize('usernameIsRequired', 'User name is required');
	connectionString = localize('connectionString', 'Connection String');
	connectionStringIsRequired = localize('connectionStringIsRequired', 'Connection string is required');
	signIn = localize('signIn', 'Sign in');
	additionalParameters = localize('additionalParameters', 'Additional parameters');
	connect = localize('connect', 'Connect');
	parameters = localize('parameters', 'Parameters');
	loading = localize('loading', 'Loading');
	queryCostHeader = localize('queryCostHeader', 'Query {0}:  Query cost (relative to the script):  {1}');
	metric = localize('metric', 'Metric');
	actualElapsedTime = localize('actualElapsedTime', 'Actual Elapsed Time');
	actualElapsedCpuTime = localize('actualElapsedCpuTime', 'Actual Elapsed CPU Time');
	cost = localize('cost', 'Cost');
	subtreeCost = localize('subtreeCost', 'Subtree Cost');
	actualNumberOfRows = localize('actualNumberOfRows', 'Actual Number of Rows For All Executions');
	numRowsRead = localize('numRowsRead', 'Number of Rows Read');
	off = localize('off', 'Off');
	findNodes = localize('findNodes', 'Find Nodes');
	equals = localize('equals', 'Equals');
	contains = localize('contains', 'Contains');
	savePlan = localize('savePlan', 'Save Plan');
	openXml = localize('openXml', 'Open Xml');
	openQuery = localize('openQuery', 'Open Query');
	zoomIn = localize('zoomIn', 'Zoom In');
	zoomOut = localize('zoomOut', 'Zoom Out');
	zoomToFit = localize('zoomToFit', 'Zoom to Fit');
	customZoom = localize('customZoom', 'Custom Zoom');
	findNode = localize('findNode', 'Find Node');
	highlightOps = localize('highlightOps', 'Highlight Expensive Operation');
	toggleTooltips = localize('toggleTooltips', 'Toggle Tooltips');
	executionPlan = localize('executionPlan', 'Execution Plan');
};
